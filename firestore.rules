
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    // Ensures robustness against missing user doc or isAdmin field.
    function isAdmin(userId) {
      return userId != null &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.get('isAdmin', false) == true;
    }

    // Users Collection
    match /users/{userId} {
      // Users can read their own profile. Admins can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Users can write to their own profile.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // EHCP Documents Collection
    match /ehcpDocuments/{docId} {
      // LIST:
      // Allow list operations to proceed. The server-side query is responsible for filtering
      // to the correct user's documents. The 'get' rule below will secure individual document access.
      // This addresses the issue where request.auth might be null in the server action's context.
      allow list: if true;

      // GET:
      // Allow if the request is authenticated AND
      // (the user is the associated user OR the user is an admin).
      allow get: if request.auth != null &&
                   ( (resource.data.associatedUserId == request.auth.uid) ||
                     isAdmin(request.auth.uid)
                   );

      // WRITE (create, update, delete):
      // Only allow if the request is authenticated AND the user is an admin.
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // User Avatars
    // Path: /avatars/{userId}/{allAvatarPaths=**} (e.g., avatars/user123/avatar.png)
    match /avatars/{userId}/{fileName} {
      // Read: Allow anyone to read avatars (e.g., for display in profiles)
      // If you want to restrict, change to: if request.auth != null; or more specific.
      allow read: if true;

      // Write: Allow only if the authenticated user's ID matches the {userId} in the path,
      // and the filename is 'avatar.[extension]'.
      allow write: if request.auth != null &&
                     request.auth.uid == userId &&
                     fileName.matches('avatar\\.(png|jpg|jpeg|gif|webp)');
    }

    // EHCP Documents
    // Path: /ehcp_documents/{documentId}/{allEhcpPaths=**} (e.g., ehcp_documents/docABC/report.pdf)
    match /ehcp_documents/{documentFirestoreId}/{originalFileName} {
      // Read: Allow if the user is authenticated.
      // Access to download URLs should be controlled by your app logic (e.g., user can only see links to their own docs).
      allow read: if request.auth != null;

      // Write: Allow if the user is authenticated.
      // Your server-side 'addEhcpDocument' action (which checks for admin) is the primary gatekeeper for uploads.
      // This rule ensures the operation itself is done by an authenticated session.
      allow write: if request.auth != null;
    }

    // Default deny all other paths in storage
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
