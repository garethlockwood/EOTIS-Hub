
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Authenticated users can read their own document.
    // - Authenticated users can create their own document (e.g., on signup).
    // - Authenticated users can update their own document.
    // - Admin users (checked via custom claim or field) could potentially have broader access if needed.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Example for admin read/write access to any user document (if you implement isAdmin custom claim or field)
      // allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // EHCPDocuments collection:
    // - Allow list if the user is authenticated. The query itself should filter by associatedUserId.
    // - Allow get if the document's associatedUserId matches the requester's UID OR if the requester is an admin.
    // - Allow write (create, update, delete) only if the requester is an admin.
    match /ehcpDocuments/{docId} {
      allow list: if request.auth != null;

      allow get: if request.auth != null &&
                    (resource.data.associatedUserId == request.auth.uid ||
                     (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true));

      allow write: if request.auth != null &&
                      (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }

    // Add rules for other collections as needed, for example:
    // match /calendarEvents/{eventId} {
    //   allow read, write: if request.auth != null; // Basic authenticated access
    // }

    // match /financialDocuments/{docId} {
    //   allow read, write: if request.auth != null; // Basic authenticated access
    // }

    // match /contentRepository/{docId} {
    //  allow read, write: if request.auth != null; // Basic authenticated access
    // }

    // match /staffMembers/{staffId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Only admins can write
    // }
  }
}
