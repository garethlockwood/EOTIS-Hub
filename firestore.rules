
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || 
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true));
      allow write: if request.auth != null && request.auth.uid == userId;
      // Admins can list users if needed for an admin panel (add this if you build such a feature)
      // allow list: if request.auth != null &&
      //                  (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
      //                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }

    // EHCP Documents Collection
    match /ehcpDocuments/{docId} {
      allow list: if request.auth != null; // Query must enforce user-specific or admin access

      allow get: if request.auth != null &&
                   (resource.data.associatedUserId == request.auth.uid ||
                    (request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true));

      allow write: if request.auth != null &&
                     (request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }

    // Default deny all other paths in Firestore
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // User Avatars
    // Users can only write their own avatar, named avatar.<extension>
    // Path example: /avatars/USER_ID/avatar.png
    match /avatars/{userId}/{fileName} {
      // Allow read if user is authenticated. Consider 'if true;' if avatars are public.
      allow read: if request.auth != null;
      // Allow write ONLY if the authenticated user's ID matches the {userId} in the path
      // AND the file name starts with "avatar." and has a common image extension.
      allow write: if request.auth != null && 
                      request.auth.uid == userId && 
                      fileName.matches('avatar\\.(png|jpg|jpeg|gif|webp)');
    }

    // EHCP Documents
    // Path example: /ehcp_documents/DOCUMENT_ID/original_filename.pdf
    match /ehcp_documents/{documentId}/{originalFileName} {
      // Allow read if user is authenticated. App logic should control who gets the download URL
      // based on Firestore document access (which checks associatedUserId or admin status).
      allow read: if request.auth != null;
      // Allow write if user is authenticated. The server action (addEhcpDocument)
      // is responsible for ensuring only admins can trigger this upload.
      allow write: if request.auth != null;
    }

    // Default deny all other paths in Storage
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
