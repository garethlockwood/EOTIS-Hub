
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user profile (optional, for admin panel features)
      // allow get: if request.auth != null &&
      //               (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
      //                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }

    // EHCP Documents Collection
    match /ehcpDocuments/{docId} {
      allow list: if request.auth != null; // Authenticated users can attempt to list, query must filter.

      allow get: if request.auth != null && request.auth.uid != null &&
                   (resource.data.associatedUserId == request.auth.uid ||
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true));

      allow write: if request.auth != null && request.auth.uid != null &&
                     (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }

    // Default deny all other paths in Firestore
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // User Avatars
    // Example path: avatars/USER_UID/avatar.png
    match /avatars/{userId}/{allAvatarPaths=**} {
      allow read: if request.auth != null; // Or `if true;` for public avatars
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // EHCP Documents
    // Example path: ehcp_documents/DOCUMENT_ID/fileName.pdf
    // Uploads are handled by server actions which should verify admin status.
    match /ehcp_documents/{documentId}/{allEhcpPaths=**} {
      allow read: if request.auth != null; // Allow authenticated users to read if they have the URL.
      allow write: if request.auth != null; // Relies on server actions to gate uploads to admins only.
                                           // The user calling the server action (admin) must be authenticated.
    }

    // Deny all other paths in Storage by default
    // This explicit deny is good practice, though storage is default deny without rules.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
